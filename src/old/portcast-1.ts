import { z } from 'zod';

const data = {
  bill_of_lading: {
    bl_no: 'COSU6349613240',
    carrier_no: 'COSU',
    cntr_no: 'BMOU1589176',
    container_event_list_status_info: {
      code: 'SUCCESS',
      metadata: [],
    },
    created: '2019-08-24T14:15:22Z',
    id: 'da420d2e-7657-4b2b-80a9-a6a30e58482c',
    place_of_delivery: 'USORF',
    place_of_delivery_name: 'NORFOLK',
    place_of_receipt: 'GHTEM',
    place_of_receipt_name: 'TEMA',
    pod: 'GHTEM',
    pod_actual_arrival_lt: '2019-08-24T14:15:22Z',
    pod_actual_arrival_lt_from_ais: '2019-08-24T14:15:22Z',
    pod_actual_departure_lt_from_ais: '2019-08-24T14:15:22Z',
    pod_actual_discharge_lt: '2019-08-24T14:15:22Z',
    pod_name: 'TEMA',
    pod_predicted_arrival_lt: '2019-08-24T14:15:22Z',
    pod_predicted_departure_lt: '2019-08-24T14:15:22Z',
    pod_scheduled_arrival_lt: '2019-08-24T14:15:22Z',
    pod_scheduled_arrival_lt_first_seen: '2019-08-24T14:15:22Z',
    pod_scheduled_arrival_lt_from_schedule: '2019-08-24T14:15:22Z',
    pod_scheduled_departure_lt_from_schedule: '2019-08-24T14:15:22Z',
    pod_scheduled_discharge_lt: '2019-08-24T14:15:22Z',
    pod_terminal_name: 'MERIDIAN PORT SERVICE LIMITED',
    pol: 'USORF',
    pol_actual_arrival_lt_from_ais: '2019-08-24T14:15:22Z',
    pol_actual_departure_lt: '2019-08-24T14:15:22Z',
    pol_actual_departure_lt_from_ais: '2019-08-24T14:15:22Z',
    pol_actual_loading_lt: '2019-08-24T14:15:22Z',
    pol_name: 'NORFOLK',
    pol_predicted_arrival_lt: '2019-08-24T14:15:22Z',
    pol_predicted_departure_lt: '2019-08-24T14:15:22Z',
    pol_scheduled_arrival_lt_from_schedule: '2019-08-24T14:15:22Z',
    pol_scheduled_departure_lt: '2019-08-24T14:15:22Z',
    pol_scheduled_departure_lt_first_seen: '2019-08-24T14:15:22Z',
    pol_scheduled_departure_lt_from_schedule: '2019-08-24T14:15:22Z',
    pol_scheduled_loading_lt: '2019-08-24T14:15:22Z',
    pol_terminal_name: 'PPCY EMPTY DEPOT',
    updated: '2019-08-24T14:15:22Z',
  },
  bill_of_lading_bookmark: {
    bl_no: 'ONEYANRB31646600',
    carrier_no: 'ONEY',
    cntr_no: 'TLLU1181321',
    created: '2019-08-24T14:15:22Z',
    deleted: false,
    derived_carrier_no: 'ONEY',
    id: 'da420d2e-7657-4b2b-80a9-a6a30e58482c',
    org_id: 'f4b40919-a628-4ae3-aefe-b23268b56e4b',
    status: 'string',
    status_code: 'string',
    status_info: {
      code: 'UPLOADED',
      metadata: [],
    },
    system_deleted: false,
    updated: '2019-08-24T14:15:22Z',
  },
  container_event_list: [
    {
      created: '2019-08-24T14:15:22Z',
      event_raw: 'Empty container pick-up',
      event_time: '2019-08-24T14:15:22Z',
      event_time_estimated: '2019-08-24T14:15:22Z',
      event_type_code: 'PICKUP',
      event_type_name: 'Empty container pick-up',
      id: 'c5f7acd1-28e6-4d98-996f-c214418adcc3',
      location_raw: 'Xiamen',
      location_type_code: 'POR',
      location_type_name: 'Place of receipt',
      mode_of_transport: 'TRUCK',
      port_code: 'CNXMG',
      port_name: 'XIAMEN',
      terminal_details: {},
      updated: '2019-08-24T14:15:22Z',
      vessel_imo: 9751107,
      vessel_name: 'GEMLIK EXPRESS',
    },
  ],
  container_metadata: {
    cntr_no: 'TLLU1181321',
    detail_st: '42G1',
    external_height_ft: 8.51,
    external_length_ft: 40,
    external_width_ft: 7.99,
  },
  co2_emissions: {
    total: 0,
    wtt: 0,
    ttw: 0,
    intensity: 0,
  },
  delay_lists: [
    {
      created: '2019-08-24T14:15:22Z',
      delay_description: 'Container rolled over to another vessel at POL',
      location_type_code: 'POL',
      port_code: 'CNXMG',
      port_name: 'XIAMEN',
      reason_code: 'RLV',
      rotation_change: {
        comparison_schedule: [],
        updated_schedule: [],
      },
      schedule_change: [{}],
      vessel_change: {},
    },
  ],
  response_id: '8d328ae1-5151-4cc0-8d8e-b9adb6dbbc69',
  msg: 'Obtained latest bill of lading and container tracking information',
  org_id: 'f4b40919-a628-4ae3-aefe-b23268b56e4b',
  sailing_info_tracking: [
    {
      ais: {},
      sailing_info: {},
      status_info: {
        prediction: {},
        vessel: {},
      },
      voyage_details: [{}],
      msg: 'AIS successfully fetched',
      success: true,
    },
  ],
  status_info: {
    code: 'SUCCESS',
    metadata: [],
  },
  success: true,
  transport_plan: [
    {
      destination_location_code: 'USORF',
      destination_location_name: 'NORFOLK',
      leg: 1,
      mode_of_transport: 'VESSEL',
      source_location_code: 'GHTEM',
      source_location_name: 'TEMA',
    },
  ],
};

const schema = z.object({
  bill_of_lading: z.union([
    z.record(z.never()),
    z.object({
      bl_no: z.string(),
      carrier_no: z.string(),
      cntr_no: z.string(),
      container_event_list_status_info: z.discriminatedUnion('code', [
        z.object({ code: z.literal('SUCCESS'), metadata: z.array(z.never()) }),
        z.object({
          code: z.literal('MISSING_DATA'),
          metadata: z.array(
            z.enum([
              'LOCATION_DATA_INCOMPLETE',
              'POD_DATA_INCOMPLETE',
              'POL_DATA_INCOMPLETE',
              'PORT_DATA_INCOMPLETE',
              'VESSEL_DATA_INCOMPLETE',
            ])
          ),
        }),
        z.object({
          code: z.literal('INVALID_DATA'),
          metadata: z.array(
            z.enum([
              'VESSEL_EVENTS_NOT_IN_ORDER',
              'LOCATION_EVENTS_NOT_IN_ORDER',
              'POL_POD_DATA_INCONSISTENT',
            ])
          ),
        }),
      ]),
      created: z.string().datetime(),
      id: z.string().uuid(),
      place_of_delivery: z.string(),
      place_of_receipt: z.string(),
      pod: z.string(),
      pod_actual_arrival_lt: z.string().datetime().optional(),
      pod_actual_arrival_lt_from_ais: z.string().datetime().optional(),
      pod_actual_departure_lt_from_ais: z.string().datetime().optional(),
      pod_actual_discharge_lt: z.string().datetime().optional(),
      pod_name: z.string(),
      pod_predicted_arrival_lt: z.string().datetime().optional(),
      pod_predicted_departure_lt: z.string().datetime().optional(),
      pod_scheduled_arrival_lt: z.string().datetime().optional(),
      pod_scheduled_arrival_lt_first_seen: z.string().datetime().optional(),
      pod_scheduled_arrival_lt_from_schedule: z.string().datetime().optional(),
      pod_scheduled_departure_lt_from_schedule: z.string().datetime().optional(),
      pod_scheduled_discharge_lt: z.string().datetime().optional(),
      pod_terminal_name: z.string(),
      pol: z.string(),
      pol_actual_arrival_lt_from_ais: z.string().datetime().optional(),
      pol_actual_departure_lt: z.string().datetime().optional(),
      pol_actual_departure_lt_from_ais: z.string().datetime().optional(),
      pol_actual_loading_lt: z.string().datetime().optional(),
      pol_name: z.string(),
      pol_predicted_arrival_lt: z.string().datetime().optional(),
      pol_predicted_departure_lt: z.string().datetime().optional(),
      pol_scheduled_arrival_lt_from_schedule: z.string().datetime().optional(),
      pol_scheduled_departure_lt: z.string().datetime().optional(),
      pol_scheduled_departure_lt_first_seen: z.string().datetime().optional(),
      pol_scheduled_departure_lt_from_schedule: z.string().datetime().optional(),
      pol_scheduled_loading_lt: z.string().datetime().optional(),
      pol_terminal_name: z.string(),
      updated: z.string().datetime(),
    }),
  ]),
  bill_of_lading_bookmark: z.object({
    bl_no: z.string().optional(),
    carrier_no: z.string(),
    cntr_no: z.string(),
    created: z.string().datetime(),
    deleted: z.boolean(),
    derived_carrier_no: z.string().optional(),
    id: z.string().uuid(),
    org_id: z.string().uuid(),
    status: z.string().optional(), // TODO deprecated?
    status_code: z.string().optional(), // TODO deprecated?
    status_info: z.object({
      code: z.enum([
        'UPLOADED',
        'BL_NOT_FOUND',
        'CNTR_NOT_FOUND',
        'INVALID_BL_NO',
        'CNTR_NOT_MAPPED_TO_BL',
        'EARLY_JOURNEY',
        'DATA_FROM_PROVIDER_INTERRUPTED',
        'JOURNEY_IN_PROGRESS',
        'JOURNEY_COMPLETED',
      ]),
      metadata: z.array(z.never()),
    }),
    system_deleted: z.boolean(),
    updated: z.string().datetime(),
  }),
  container_event_list: z.array(
    z.object({
      created: z.string().datetime(),
      event_raw: z.string(),
      event_time: z.string().datetime().optional(),
      event_time_estimated: z.string().datetime().optional(),
      event_type_code: z.enum([
        'PICKUP',
        'GATEIN',
        'LOAD',
        'DEPART',
        'ARRIVE',
        'UNLOAD',
        'GATEOUT',
        'DELIVER',
        'RETURN',
        'T/S BERTHING',
        'POD BERTHING',
        'UNCLASSIFIED',
        'IN TRANSIT',
      ]),
      event_type_name: z.enum([
        'Empty container pick-up',
        'Gate in',
        'Loaded',
        'Departure',
        'Arrival',
        'Unload',
        'Gate out',
        'Container delivered to consignee',
        'Empty container returned',
        'T/S Berthing Destination',
        'POD Berthing Destination',
        'Unclassified',
      ]),
      id: z.string().uuid(),
      location_raw: z.string().optional(),
      location_type_code: z.enum(['POR', 'POL', 'POT', 'POD', 'POA', 'UNCLASSIFIED']),
      location_type_name: z.enum([
        'Place of receipt',
        'Port of loading',
        'Port of transshipment',
        'Port of discharge',
        'Place of delivery',
        'Unclassified',
      ]),
      mode_of_transport: z.enum(['TRUCK', 'RAIL', 'VESSEL', 'BARGE', 'UNCLASSIFIED']),
      port_code: z.string().optional(),
      port_name: z.string().optional(),
      terminal_details: z.object({
        terminal_code: z.string().optional(),
        terminal_code_source: z.string().optional(),
        terminal_name: z.string().optional(),
      }),
      updated: z.string().datetime(),
      vessel_imo: z.number().optional(),
      vessel_name: z.string().optional(),
    })
  ),
  container_metadata: z.object({
    cntr_no: z.string(),
    detail_st: z.string(), // TODO ISO6346
    external_height_ft: z.number(),
    external_length_ft: z.number(),
    external_width_ft: z.number(),
  }),
  co2_emissions: z.object({
    total: z.number().optional(),
    wtt: z.number().optional(),
    ttw: z.number().optional(),
    intensity: z.number().optional(),
  }),
  delay_lists: z.array(
    z.object({
      created: z.string().datetime(),
      delay_description: z.enum([
        'Container rolled over to another vessel at POL',
        'Container rolled over to another vessel at POT',
        'Delayed Departure from POL',
        'Delayed Departure from POT',
        'Port Rotation Has Changed',
      ]),
      location_type_code: z.string(),
      port_code: z.string(),
      port_name: z.string(),
      reason_code: z.enum(['RLV', 'LTD', 'PRC']),
      rotation_change: z.object({
        comparison_schedule: z.array(z.string()).optional(),
        updated_schedule: z.array(z.string()).optional(),
      }),
      schedule_change: z
        .array(
          z.object({
            event_type_code: z.enum(['ARRIVE', 'LOAD', 'DEPART']).optional(),
            location_type_code: z.enum(['POL', 'POT', 'POD']).optional(),
            new_date: z.string().datetime().optional(),
            old_date: z.string().datetime().optional(),
          })
        )
        .transform((values) => values.filter((value) => Object.keys(value).length > 0)),
      vessel_change: z.object({
        comparison_vessel: z.number().optional(),
        updated_vessel: z.string().optional(),
      }),
    })
  ),
  response_id: z.string().uuid(),
  msg: z.string(),
  org_id: z.string().uuid(),
  sailing_info_tracking: z.array(
    z.object({
      ais: z.object({
        course: z.number().optional(),
        imo: z.number().optional(),
        lat: z.number().optional(),
        lon: z.number().optional(),
        speed_nm: z.number().optional(),
        status: z.number().optional(),
        timestamp_utc: z.string().uuid().optional(), // TODO?
      }),
      sailing_info: z.object({
        carrier_no: z.string(),
        created: z.string().datetime(), // TODO
        id: z.string().uuid(),
        imo: z.string().optional(),
        is_active: z.boolean(),
        pod: z.string().optional(),
        pod_actual_arrival_lt: z.string().datetime().optional(),
        pod_actual_arrival_lt_from_ais: z.string().datetime().optional(),
        pod_actual_departure_lt_from_ais: z.string().datetime().optional(),
        pod_actual_discharge_lt: z.string().datetime().optional(),
        pod_name: z.string().optional(),
        pod_predicted_arrival_lt: z.string().datetime().optional(),
        pod_predicted_departure_lt: z.string().datetime().optional(),
        pod_scheduled_arrival_lt: z.string().datetime().optional(),
        pod_scheduled_arrival_lt_from_schedule: z.string().datetime().optional(),
        pod_scheduled_departure_lt_from_schedule: z.string().datetime().optional(),
        pod_scheduled_discharge_lt: z.string().datetime().optional(),
        pod_terminal_name: z.string().optional(),
        pol: z.string().optional(),
        pol_actual_arrival_lt_from_ais: z.string().datetime().optional(),
        pol_actual_departure_lt: z.string().datetime().optional(),
        pol_actual_departure_lt_from_ais: z.string().datetime().optional(),
        pol_actual_loading_lt: z.string().datetime().optional(),
        pol_name: z.string().optional(),
        pol_predicted_arrival_lt: z.string().datetime().optional(),
        pol_predicted_departure_lt: z.string().datetime().optional(),
        pol_scheduled_arrival_lt_from_schedule: z.string().datetime().optional(),
        pol_scheduled_departure_lt: z.string().datetime().optional(),
        pol_scheduled_departure_lt_from_schedule: z.string().datetime().optional(),
        pol_scheduled_loading_lt: z.string().datetime().optional(),
        pol_terminal_name: z.string().optional(),
        updated: z.string().datetime().optional(),
        vessel_flag: z.string().optional(),
        vessel_leg: z.number(),
        vessel_name: z.string().optional(),
        voyage_no: z.string().optional(),
      }),
      status_info: z.object({
        prediction: z.discriminatedUnion('code', [
          z.object({ code: z.literal('INIT'), metadata: z.array(z.never()) }),
          z.object({
            code: z.literal('SUCCESS'),
            metadata: z.array(z.literal('PREDICTIONS_NOT_ENABLED')),
          }),
          z.object({
            code: z.literal('WARNING'),
            metadata: z.array(z.literal('POSSIBLE_LAG_IN_PORTCALL_CAPTURE')),
          }),
          z.object({ code: z.literal('FAILED'), metadata: z.array(z.literal('INTERNAL_ERROR')) }),
        ]),
        vessel: z.discriminatedUnion('code', [
          z.object({ code: z.literal('INIT'), metadata: z.array(z.never()) }),
          z.object({ code: z.literal('SUCCESS'), metadata: z.array(z.never()) }),
          z.object({
            code: z.literal('FAILED'),
            metadata: z.array(
              z.enum([
                'LATEST_VESSEL_PORTCALLS_NOT_FOUND',
                'LATEST_VESSEL_AIS_NOT_FOUND',
                'LATEST_VESSEL_SCHEDULE_NOT_FOUND',
              ])
            ),
          }),
        ]),
      }),
      voyage_details: z.array(
        z.object({
          active_scac: z.string().optional(),
          actual_arrival_lt: z.string().datetime().optional(),
          actual_arrival_utc: z.string().datetime().optional(),
          actual_departure_lt: z.string().datetime().optional(),
          actual_departure_utc: z.string().datetime().optional(),
          delay_reasons: z.array(z.never()),
          id: z.string().uuid(),
          index: z.number(),
          lat: z.number(),
          lon: z.number(),
          port_code: z.string(),
          port_name: z.string(),
          predicted_arrival_lt: z.string().datetime().optional(),
          predicted_arrival_utc: z.string().datetime().optional(),
          predicted_departure_lt: z.string().datetime().optional(),
          predicted_departure_utc: z.string().datetime().optional(),
          prediction_time_utc: z.string().datetime().optional(),
          scheduled_arrival_lt: z.string().datetime().optional(),
          scheduled_arrival_utc: z.string().datetime().optional(),
          scheduled_departure_lt: z.string().datetime().optional(),
          scheduled_departure_utc: z.string().datetime().optional(),
          timezone: z.string().optional(),
          voyage_no_list: z.array(z.string()),
        })
      ),
      msg: z.enum([
        'AIS successfully fetched',
        'Cannot find vessel live ais data (before the time specified)',
      ]),
      success: z.boolean(),
    })
  ),
  status_info: z.discriminatedUnion('code', [
    z.object({ code: z.literal('SUCCESS'), metadata: z.array(z.never()) }),
    z.object({
      code: z.literal('WARNING'),
      metadata: z.array(
        z.enum([
          'LATEST_PREDICTIONS_WARNING',
          'LATEST_PREDICTIONS_FAILED',
          'SAILING_INFO_TRACKING_FAILED',
          'BILL_OF_LADING_BOOKMARK_WARNING',
        ])
      ),
    }),
    z.object({ code: z.literal('FAILED'), metadata: z.array(z.never()) }),
  ]),
  success: z.boolean(),
  transport_plan: z.array(
    z.object({
      destination_location_code: z.string(),
      destination_location_name: z.string(),
      leg: z.number(),
      mode_of_transport: z.enum(['VESSEL', 'TRUCK', 'BARGE', 'UNCLASSIFIED']),
      source_location_code: z.string(),
      source_location_name: z.string(),
    })
  ),
});

console.log('parse', schema.parse(data));
